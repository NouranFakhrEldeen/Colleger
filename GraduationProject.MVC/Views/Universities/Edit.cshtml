@model GraduationProject.Data.Entities.University

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    <div class="container container-md-fluid">


        <div class="row mt-2">

            @using (Html.BeginForm("Edit", "Universities", FormMethod.Post, new { enctype = "multipart/form-data", @class = "col-lg-8 offset-lg-2 col-md-12 offset-md-0" }))
            {
                @Html.AntiForgeryToken()

            <div class="form bg-light rounded-lg border p-3">
                <h4 class="text-center py-1 my-1">Edit University</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (Model.Logo != null)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Logo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <img OldLogo width="200" height="100" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Logo, 0, Model.Logo.Length)" />

                            @Html.ValidationMessageFor(model => model.Logo, "", new { @class = "text-danger" })
                            <button type="button" class="btn btn-primary bg-clr-primary" ChangeLogo>Change</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label for="exampleFormControlFile1" class="control-label col-md-2">Upload a logo!</label>
                        <div class="col-md-10">
                            <input type="file" class="form-control-file" id="LogoUpload" LogoIncoming name="LogoIncoming">
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.Governorate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select id="Governorate" name="Governorate" class="form-control" GovernorateSelector value="@Model.Governorate"></select>
                        @Html.ValidationMessageFor(model => model.Governorate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group row">
                    <div class="col-sm-12 col-md-6 offset-md-3 col-lg-4 offset-lg-4">
                        <input type="submit" value="Save" class="btn btn-lg btn-primary bg-clr-primary text-center w-100" />
                    </div>
                </div>
            </div>
            }
        
            </div>
        </div>
    <div class="row my-2">
            <div class="col text-center">
                @Html.ActionLink("Back to List", "Index", null,htmlAttributes: new { @class = "btn btn-sm btn-primary bg-clr-secondary" })
            </div>
    </div>

<script>
    let $buttonElt = $('button[ChangeLogo]');
    let $oldLogoElt = $('img[OldLogo]');
    $buttonElt.click(_ => {
        let newFormItem = $(`
                    <div class="col-md-10">
                        <input type="file" class="form-control-file" LogoIncoming id="LogoUpload" name="LogoIncoming">
                    </div>`);
        $oldLogoElt.hide();
        $buttonElt.hide();
        $oldLogoElt.parent().append(newFormItem);
        let $photoUploadButton = $('input[LogoIncoming]');
        $photoUploadButton.trigger('click');
    });
</script>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
